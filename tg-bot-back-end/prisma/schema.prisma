// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  chatId    Int     @id
  name  String
  userGoals userGoals[]
  Quiz Quiz[]
  HelpReq HelpReq[]
  userPrizes userPrizes[]
}

model userGoals {
  id              Int         @id @default(autoincrement()) 
  userId    Int     
  goalId  Int
  user User @relation(fields: [userId], references: [chatId])
  goal Goal @relation(fields: [goalId], references: [id])
}
model Goal {
  id              Int         @id @default(autoincrement())
  name            String
  description     String
  deadline        DateTime
  createdTime     DateTime    @default(now())
  categoryName    String
  userGoals       userGoals[]
  category        Category    @relation(fields: [categoryName], references: [name])
  progressInfo    progressInfo[]
  Quiz Quiz[]
  userPrizes userPrizes[]
}

enum Statuses {
  active
  inProgress
  done
  canceled
}

enum contentType {
  img
  video
}

enum prizeType {
  link
  promo
  file
  another
}

model progressInfo {
  id    Int     @id @default(autoincrement())
  dateChecked DateTime?
  admin String?
  goalId Int
  status Statuses @default(active)
  comment String?
  goal        Goal    @relation(fields: [goalId], references: [id])
  result result[]
  }

model result {
  id    Int     @id @default(autoincrement())
  link String?
  type contentType @default(img)
  progressInfoId Int
  progressInfo progressInfo @relation(fields: [progressInfoId], references: [id])
}

model Category {
  name    String @unique
  Goal Goal[]
}

model Admin {
  id    Int     @id @default(autoincrement())
  name    String 
  surname String
}

model Quiz {
  id    Int     @id @default(autoincrement())
  goalId Int
  userId Int
  answers String
  isFirst Boolean default(true)
  dateFilled DateTime @default(now())
  User User @relation(fields: [userId], references: [chatId])
  Goal Goal @relation(fields: [goalId], references: [id])
}

model Prize {
  id    Int     @id @default(autoincrement())
  type prizeType
  content String
  userPrizes userPrizes[]
}

model HelpReq {
  id    Int     @id @default(autoincrement())
  userId Int
  nickName String
  Helped Boolean
  Description String?
  user User @relation(fields: [userId], references: [chatId])
}

model userPrizes{
  id    Int     @id @default(autoincrement())
  userId Int
  goalId Int 
  prizeId Int
  user User @relation(fields: [userId], references: [chatId])
  Goal Goal @relation(fields: [goalId], references: [id])
  Prize Prize @relation(fields: [prizeId], references: [id])

}