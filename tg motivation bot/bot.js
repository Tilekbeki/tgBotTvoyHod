
const express = require('express');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const {commands}  = require('./blocks/comands');
const {quotes}  = require('./blocks/quotes');

const {start}  = require('./functions/start');
const {getCategories}  = require('./functions/getCategories');
const {checkUserExist}  = require('./functions/checkUserExist');





const API_KEY_BOT = '6738232005:AAEIQJsUxGAnCieXZeszbdOtpVmMlHQ40QM';

const bot = new TelegramBot(API_KEY_BOT, {
    polling: {
      interval: 300,
      autoStart: true
    }
  });
const app = express();
const PORT = process.env.PORT || 3002;
// –ú–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
let curDeadline;
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–∞
// app.get('/api/status/:status/:chatId', (req, res) => {
//   const status = req.params.status;
//   const chatId = req.params.chatId;

//   console.log(`–°—Ç–∞—Ç—É—Å: ${status}, Chat ID: ${chatId}`);
  
//   res.send({ status: '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç', receivedStatus: status, receivedChatId: chatId });
// });
let isCreatingGoal = false;
let progressinfoId;
//–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
bot.on("polling_error", err => console.log(err.data.error.message));

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
bot.setMyCommands(commands);

async function getUserGoals(userId) {
    try {
      const response = await fetch(`http://localhost:3000/usergoal/${userId}`);
      if (response.ok) {
        const data = await response.json();
        return data;
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      return [];
    }
  }

start(bot, app);
    //–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    const categories = ['category1', 'category2', 'category3']; // Example categories

    bot.on('callback_query', async ctx => {
      try {
          console.log('Callback data:', ctx.data); // Debugging line to see what data is received
  
          switch (ctx.data) {
              case "closeMenu":
                  await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                  break;
              case "createGoal":
                  getUserGoals(ctx.message.chat.id).then(async date => {
                      const userGoals = date;
                      const activeGoal = userGoals.find(goal => goal.status === 'active' || goal.status === 'inProgress');
                      if (activeGoal) {
                          console.log(activeGoal);
                          await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                          await bot.sendMessage(ctx.message.chat.id, `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.`);
                      } else {
                          await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                          await bot.sendMessage(ctx.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–≤–æ–µ–π —Ü–µ–ª–∏üëà");
                          getCategories(bot, ctx.message.chat.id);
                          console.log('–æ–Ω —Å—é–¥–∞ –∑–∞—à–µ–ª');
                      }
                  });
                  break;
              case "showGoals":
                  getUserGoals(ctx.message.chat.id).then(async data => {
                      const userGoals = data;
                      await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                      const goalsText = userGoals.map((goal, index) => `${index + 1}) –¶–µ–ª—å: ${goal.goal}, —Å—Ç–∞—Ç—É—Å: ${goal.status}`).join('\n');
                      await bot.sendMessage(ctx.message.chat.id, `–í–∞—à–∏ —Ü–µ–ª–∏:\n${goalsText}`);
                  });
                  break;
              default:
                  const categoryId = ctx.data; // Assuming callback_data is category ID
                  const chatId = ctx.message.chat.id;
  
                  // Handle category selection
                  console.log('Category ID selected:', categoryId); // Debugging line to see which category was selected
                  bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å ID: ${categoryId}`)
                      .then(() => {
                          checkUserExist(bot, chatId, ctx.message.chat.first_name, categoryId, app);
                          bot.deleteMessage(chatId, ctx.message.message_id)
                              .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
                      })
                      .catch(error => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error));
                  break;
          }
      } catch (error) {
          console.log(error);
      }
  });
