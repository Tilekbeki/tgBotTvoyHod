const { getStartAgain } = require('./getStartAgain');
const { getQuiz } = require('./getQuiz');

function createGoal(bot, chatId, category, app) {
    isCreatingGoal = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ true –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
    let goalName = '';
    let goalDescription = '';
    let deadline = '';

    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏
    function askGoalName(bot, category, app) {
        bot.sendMessage(chatId, '–ü—Ä–∏–Ω—è—Ç–æüëç –ê —Ç–µ–ø–µ—Ä—å –¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ü–µ–ª–∏').then(async () => {
            await bot.sendMessage(chatId, '<b>–ü—Ä–∏–º–µ—Ä:</b> –ù–∞—É—á–∏—Ç—å—Å—è —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å.', { parse_mode: "HTML" })
                .then(() => {
                    bot.once('text', msg => {
                        if (!msg.text) {
                            bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞!');
                            createGoal(bot, chatId, category, app);
                        } else {
                            const message = msg.text.toLowerCase();

                            switch (message) {
                                case "/start":
                                case "/goals":
                                case "/help":
                                case "‚ö°Ô∏è –µ—Å—Ç—å —Ü–µ–ª—å":
                                case "‚≠êÔ∏è –º–æ–∏ —Ü–µ–ª–∏":
                                    if (isCreatingGoal) {
                                        bot.sendMessage(chatId, '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –í—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏. \n –ú—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
                                        createGoal(bot, categoryName, app);
                                    } else {
                                        bot.sendMessage(chatId, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.');
                                    }
                                    break;
                                case "/exit":
                                    isCreatingGoal = false;
                                    bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                                    getStartAgain(bot, chatId);
                                    break;
                                default:
                                    if (isCreatingGoal) {
                                        goalName = msg.text;
                                        askGoalDescription(bot, category, app);
                                    }
                            }
                        }

                    });
                });
        })

    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏
    function askGoalDescription(bot, category, app) {
        bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏, –∫–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–æ—Å—Ç–∏—á—å –∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–∏, –∫–∞–∫ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å‚ö°Ô∏èüîù').then(async () => {
            await bot.sendMessage(chatId, '<b>–ü—Ä–∏–º–µ—Ä:</b> –ñ–µ–ª–∞—é —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ-–∫–ª–∏–ø –∏ –æ—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –º–æ–Ω—Ç–∞–∂–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –±—É–¥—É—â–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ —Ç–µ–ª–µ–≤–∏–¥–µ–Ω–∏–∏.', { parse_mode: "HTML" })
            bot.once('text', msg => {
                if (!msg.text) {
                    bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞!');
                    createGoal(bot, chatId, category, app);
                } else {
                    goalDescription = msg.text;
                    const message = msg.text.toLowerCase();
                    switch (message) {
                        case "/start":
                        case "/goals":
                        case "/help":
                        case "‚ö°Ô∏è –µ—Å—Ç—å —Ü–µ–ª—å":
                        case "‚≠êÔ∏è –º–æ–∏ —Ü–µ–ª–∏":
                            if (isCreatingGoal) {
                                bot.sendMessage(chatId, '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –í—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏. \n –ú—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
                                createGoal(bot, categoryName, app);
                            } else {
                                bot.sendMessage(chatId, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.');
                            }
                            break;
                        case "/exit":
                            isCreatingGoal = false;
                            bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                            getStartAgain(bot, chatId);
                            break;
                        default:
                            if (isCreatingGoal) {
                                goalName = msg.text;
                                askDeadline(bot, category, app); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                            }
                    }
                }


            });
        });

    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–µ–¥–ª–∞–π–Ω–∞
    function askDeadline(bot, category, app) {
        bot.sendMessage(chatId, '–ö –∫–∞–∫–æ–π –¥–∞—Ç–µ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):')
            .then(() => {
                bot.once('text', async msg => {
                    if (!msg.text) {
                        bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞!');
                        createGoal(bot, chatId, category, app);
                    } else {
                        const deadlinePattern = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d{2}$/;
                        if (!deadlinePattern.test(msg.text)) {
                            bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
                            askDeadline(bot, category, app); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞
                            return;
                        }
                        const message = msg.text.toLowerCase();
                        switch (message) {
                            case "/start":
                            case "/goals":
                            case "/help":
                            case "‚ö°Ô∏è –µ—Å—Ç—å —Ü–µ–ª—å":
                            case "‚≠êÔ∏è –º–æ–∏ —Ü–µ–ª–∏":
                                if (isCreatingGoal) {
                                    bot.sendMessage(chatId, '–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –í—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏. \n –ú—ã –±—ã–ª–∏ –≤—ã–Ω—É–∂–¥–µ–Ω—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
                                    createGoal(bot, categoryName, app);
                                } else {
                                    bot.sendMessage(chatId, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.');
                                }
                                break;
                            case "/exit":
                                isCreatingGoal = false;
                                bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
                                getStartAgain(bot, chatId);
                                break;
                            default:
                                console.log('–∫–∞–ø–µ—Ü —á—Ç–æ —Ç—ã —Å —ç—Ç–∏–º –º–∏—Ä–æ–º –Ω–µ —Ç–∞–∫')
                        }

                        deadline = msg.text;
                        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç Date
                        const parts = deadline.split('.');
                        const day = parseInt(parts[0], 10);
                        const month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
                        const year = parseInt(parts[2], 10);
                        curDeadline = new Date(year, month, day);
                        const currentTime = new Date();
                        console.log(`—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ${currentTime}`);
                        console.log(`—Å–∞–º –¥–µ–¥–ª–∞–π–Ω ${curDeadline}`);
                        let goal = {
                            name: goalName,
                            description: goalDescription,
                            deadline: curDeadline,
                            categoryName: category
                        }

                        // console.log('–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏:', goalName);
                        // console.log('–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏:', goalDescription);
                        // console.log('–î–µ–¥–ª–∞–π–Ω:', curDeadline);
                        // console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
                        let response = await fetch(`http://localhost:3000/goal/`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(goal)
                        });
                        if (response.ok) {
                            let responseData = await response.json();
                            let goalId = responseData.id;
                            let userGoal = {
                                "userId": chatId,
                                "goalId": goalId
                            };
                            let response2 = await fetch('http://localhost:3000/usergoal/', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json;charset=utf-8'
                                },
                                body: JSON.stringify(userGoal)
                            });
                            let progressInfoFirst = {
                                "result": "",
                                "dateChecked": "",
                                "admin": "",
                                "goalId": goalId,
                                "status": "active",
                                "comment": ""
                            }
                            //—Ç—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–≤–∏–∑–∞





                            let response3 = await fetch('http://localhost:3000/progressinfo/', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json;charset=utf-8'
                                },
                                body: JSON.stringify(progressInfoFirst)
                            });
                            if (response3.ok) {
                                const responseBody = await response3.json();
                                progressinfoId = responseBody.id;
                                console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω—Ñ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
                                getQuiz(bot, chatId, goalId, deadline, progressinfoId, true, app);
                            }
                            if (response2.ok) {
                                console.log("–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
                                let goalData = await response2.json();
                            } else {
                                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–∏:", response2.status);
                                let errorMessage = await response2.text();
                                console.error(errorMessage);
                            }
                            // await bot.deleteMessage(msg.chat.id, msg.message_id);

                        } else {
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", response.status);
                            let errorMessage = await response.text();
                            console.error(errorMessage);
                        }

                        // bot.sendMessage(chatId, '–¶–µ–ª—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏‚ö°Ô∏è\n –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ');
                        isCreatingGoal = false;
                    }

                });
            });

    }

    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏ —Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    askGoalName(bot, category,app);
}

module.exports = { createGoal };