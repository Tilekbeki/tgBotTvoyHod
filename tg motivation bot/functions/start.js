const { downloadRes } = require('./downloadRes');
const { getNewQuote } = require('./getNewQuote');
const { needHelp } = require('./needHelp');
const { sendMail } = require('./sendMail');
async function getUserGoals(userId) {
  try {
    const response = await fetch(`http://localhost:3000/usergoal/${userId}`);
    if (response.ok) {
      const data = await response.json();
      return data;
    } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return [];
  }
}

function start(bot, app) {
  bot.on('text', async msg => {
    try {
      if (msg.text == '/start') {
        await bot.sendMessage(msg.chat.id, `–ë–æ–¥—Ä–æ–≥–æ –¥–µ–Ω–µ—á–∫–∞, —á–µ–ª–æ–≤–µ–∫üëã \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –í–û–ü–õ–û–¢–ò–¢–¨ –¶–ï–õ–ò –≤ –∂–∏–∑–Ω—å –∏ –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –ù–ï–¢ –ù–ï–í–û–ó–ú–û–ñ–ù–û–ì–û‚ö° –¢–≤–æ–∏ —É—Å–ø–µ—Ö–∏ —Ç–æ—á–Ω–æ –ø—Ä–∏–Ω–µ—Å—É—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã (P.S. —Å–µ—Ä–≤–∏—Å ¬´–î–í–ò–ì–ê–ô!¬ª –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Çüòâ`);
        await bot.sendMessage(msg.chat.id, `–ê –µ—â–µ –º—ã –ø–æ–æ—â—Ä—è–µ–º —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã—Ö, —Ç–∞–∫ —á—Ç–æ –î–í–ò–ì–ê–ô!`);
        await bot.sendMessage(msg.chat.id, `–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ö°Ô∏è –ï–°–¢–¨ –¶–ï–õ–¨', callback_data: 'createGoal' }, { text: '‚≠êÔ∏è –ú–û–ò –¶–ï–õ–ò', callback_data: 'showGoals' }],
              [{ text: '–ó–∞–∫—Ä—ã—Ç—å –ú–µ–Ω—é', callback_data: 'closeMenu' }]
            ]
          }
        });
      } else if (msg.text == '/goals') {
        const userGoals = await getUserGoals(msg.chat.id);
        const goalsText = userGoals.map((goal, index) => `${index + 1}) –¶–µ–ª—å: ${goal.goal}, —Å—Ç–∞—Ç—É—Å: ${goal.status}`).join('\n');
        await bot.sendMessage(msg.chat.id, `–í–∞—à–∏ —Ü–µ–ª–∏:\n${goalsText}`);
      } else if (msg.text == '/help' || msg.text == 'üëÅ‚Äçüó® –ü–æ–º–æ—â—å') {
        await bot.sendMessage(msg.chat.id, `–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∂–∏—Ç–µ—Å—å @VlaStrel*`);
      } else if (msg.text == '/menu') {
        await bot.sendMessage(msg.chat.id, `–ú–µ–Ω—é –±–æ—Ç–∞`, {
          reply_markup: {
            keyboard: [
              ['‚ö°Ô∏è –ï–°–¢–¨ –¶–ï–õ–¨', '‚≠êÔ∏è –ú–û–ò –¶–ï–õ–ò'],
              ['üëÅ‚Äçüó® –ü–æ–º–æ—â—å']
            ]
          }
        });
      } else if (msg.text == '/result') {
        downloadRes(bot, msg.chat.id, 24, 24);
      } else if (msg.text == '/mail') {
        let info = `test`;
      
        sendMail(bot, msg.chat.id,  info);
      }
       else if (msg.text == '/getMotivation') {
        getNewQuote(bot, msg.chat.id);
      } else if (msg.text == '/helpme') {
        needHelp(bot, msg.chat.id, msg.chat.username);
      } else if (msg.text == '/prize') {
        try {
          const response = await fetch('http://localhost:3000/prize/2', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const data = await response.json();
            console.log(data);
            const base64Content = data.content;
            const buffer = Buffer.from(base64Content, 'base64');
            let tempFilePath;
            if (data.type == 'file') {
              tempFilePath = `./–ü—Ä–∏–∑ –¥–ª—è ${msg.chat.username}.docx`;
            }
            if (data.type == 'promo') {
              tempFilePath = `./–ü—Ä–∏–∑ –¥–ª—è ${msg.chat.username}.jpg`;
            }

            fs.writeFileSync(tempFilePath, buffer);

            bot.sendDocument(msg.chat.id, tempFilePath).then(() => {
              fs.unlinkSync(tempFilePath);
            }).catch(err => {
              console.error(err);
            });
          } else {
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞');
          }
        } catch (error) {
          bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
        }
      } else if (msg.text == '‚ö°Ô∏è –ï–°–¢–¨ –¶–ï–õ–¨') {
        const userGoals = await getUserGoals(msg.chat.id);
        console.log('–û–ù –¢–£–¢')
        const activeGoal = userGoals.find(goal => goal.status === 'active' || goal.status === 'inProgress');
        if (activeGoal) {
          await bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.`);
        } else {
          // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
          await bot.sendMessage(msg.chat.id, `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å:`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      } else if (msg.text == '‚≠êÔ∏è –ú–û–ò –¶–ï–õ–ò') {
        const userGoals = await getUserGoals(msg.chat.id);
        const goalsText = userGoals.map((goal, index) => `${index + 1}) –¶–µ–ª—å: ${goal.goal}, —Å—Ç–∞—Ç—É—Å: ${goal.status}`).join('\n');
        await bot.sendMessage(msg.chat.id, `–í–∞—à–∏ —Ü–µ–ª–∏:\n${goalsText}`);
      } else {
        await console.log(`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª ${msg.text}`);
      }
    } catch (error) {
      console.log(error);
    }
  });
}

module.exports = { start};
