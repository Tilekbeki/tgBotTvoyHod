const deleteEntities = require('./deleteEntity');
function downloadRes(bot, chatId, idProgress) {
    const fs = require('fs');
    const dirPathImg = './media/' + chatId+idProgress + '/image';
    const sendPrize = require('./sendPrize');
    
    let downloadedImgUrl;
    deleteEntities(bot,'result',1)
    bot.sendMessage(chatId, '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ? –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –§–û–¢–û, –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Ç–æ –í–ò–î–ï–û');
    bot.on('message', async (msg) => {
        const text = msg.text.toLowerCase();
      
        if (text === '—Ñ–æ—Ç–æ') {
          bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
          downloadPhoto();
        } else if (text === '–≤–∏–¥–µ–æ') {
          bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–±—â–µ–º –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ(–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫)');
          downloadVideo();
        } 
        else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ');
        }
      });
    function downloadPhoto() {}
    //photo
        bot.on('photo', async img => {

            try {
                if (!fs.existsSync(dirPathImg)) {
                    fs.mkdirSync(dirPathImg, { recursive: true });
                }
                try {
                    await bot.downloadFile(img.photo[0].file_id, dirPathImg);
                    const photoPath = await bot.downloadFile(img.photo[0].file_id, dirPathImg);
                    downloadedImgUrl = `./${photoPath}`;
                    const imageBuffer = fs.readFileSync(downloadedImgUrl);
                    const base64Image = imageBuffer.toString('base64');
                    console.log(base64Image);
                    const resultData = {
                        link: `data:image/jpeg;base64,${base64Image}`,
                        type: "img",
                        progressInfoId: idProgress
                    };
                    let responseResult = await fetch('http://localhost:3000/result/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify(resultData)
                    }); 
                    if(responseResult.ok) {
                        bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶');
                    }
                    bot.sendPhoto(chatId, downloadedImgUrl);
                } catch (error) {
                    console.error(error);
                }
                
                setTimeout(() => {
                    const status = getStatus(idProgress);
                    if(status!='inProgress' && status=='done'){
                        bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!  –†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø–æ—Ö–≤–∞–ª! ü•≥ –ü–æ–∫–∞–∑–∞–ª —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ - –¥–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ!¬ª');

                    } else {
                        bot.sendMessage(chatId,'–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!')
                    }
                }, 1000 * 60); // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            }

        
            
            catch(error) {
        
                console.log(error);
        
            }
    
        });
        function downloadVideo() {}
        //photo
            bot.on('message', async message => {
    
                try {
                    if (!fs.existsSync(dirPathImg)) {
                        fs.mkdirSync(dirPathImg, { recursive: true });
                    }
                    try {
                        
                        const resultData = {
                            link: `data:${message}`,
                            type: "video",
                            progressInfoId: idProgress
                        };
                        let responseResult = await fetch('http://localhost:3000/result/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json;charset=utf-8'
                            },
                            body: JSON.stringify(resultData)
                        }); 
                        if(responseResult.ok) {
                            bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶');
                        }
                        bot.sendPhoto(chatId, downloadedImgUrl);
                    } catch (error) {
                        console.error(error);
                    }
                    
                    setTimeout(() => {
                        const status = getStatus(idProgress);
                        if(status!='inProgress' && status=='done'){
                            bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!  –†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø–æ—Ö–≤–∞–ª! ü•≥ –ü–æ–∫–∞–∑–∞–ª —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ - –¥–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ!¬ª');
    
                        } else {
                            bot.sendMessage(chatId,'–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!')
                        }
                    }, 1000 * 60); // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                }
    
            
                
                catch(error) {
            
                    console.log(error);
            
                }
        
            });
}

module.exports = {downloadRes};