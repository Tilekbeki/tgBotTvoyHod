const deleteEntities = require('./deleteEntity');
const { getStatus } = require('./getStatus');
const { getQuiz } = require('./getQuiz');
const { sendMail } = require('./sendMail');
const fs = require('fs');
const sharp = require('sharp');
const { sendPrize } = require('./sendPrize');

function downloadRes(bot, chatId, idProgress, goalId, app) {
    const dirPathImg = './media/' + chatId + idProgress + '/image';
    let downloadedImgUrl;

    async function askForType(app) {
        bot.sendMessage(chatId, '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ? –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –§–û–¢–û, –µ—Å–ª–∏ –≤–∏–¥–µ–æ —Ç–æ –í–ò–î–ï–û');
        bot.once('message', async (msg) => {
            if (!msg.text) {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ');
                return askForType(app);
            }
            const text = msg.text.toLowerCase();

            if (text === '—Ñ–æ—Ç–æ') {
                bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                downloadPhoto();
            } else if (text === '–≤–∏–¥–µ–æ') {
                bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –æ–±—â–µ–º –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫)');
                downloadVideo();
            } else {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ');
                askForType(app);
            }
        });
        app.get('/api/finish/:status/:chatId', async (req, res) => {
            const status = req.params.status;
            const chatId = req.params.chatId;
            
            if (status === 'done') {
                //clearInterval(checkStatusInterval);
                bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø–æ—Ö–≤–∞–ª! ü•≥ –ü–æ–∫–∞–∑–∞–ª —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ - –¥–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ!¬ª');
                sendPrize(bot, goalId, chatId);
            } 
            if (status === 'inProgress') {
                const response = await fetch(`http://localhost:3000/progressinfo/${idProgress}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                if (response.ok) {
                    const data = await response.json();
                    //clearInterval(checkStatusInterval);
                    bot.sendMessage(chatId, '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–æ–≤–∞');
                    bot.sendMessage(chatId, `–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞: \n ${data.comment}`);
                    askForType(app);
                }
                
            } if (status !== 'inProgress' && status !== 'done') {
                bot.sendMessage(chatId, '–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!');
                askForType(app);
                bot.sendMessage(chatId, `–°—Ç–∞—Ç—É—Å ${status}`);
            }
        });
    }

    async function downloadPhoto() {
        bot.once('message', async (msg) => {
            if (msg.photo && msg.photo.length > 0) {
                try {
                    if (!fs.existsSync(dirPathImg)) {
                        fs.mkdirSync(dirPathImg, { recursive: true });
                    }

                    const highestQualityPhoto = msg.photo[msg.photo.length - 1];
                    const photoPath = await bot.downloadFile(highestQualityPhoto.file_id, dirPathImg);
                    downloadedImgUrl = `./${photoPath}`;

                    const jpegPath = downloadedImgUrl.replace(/\.[^/.]+$/, ".jpeg");

                    await sharp(downloadedImgUrl)
                        .jpeg()
                        .toFile(jpegPath);

                    const imageBuffer = fs.readFileSync(jpegPath);
                    const base64Image = imageBuffer.toString('base64');
                    console.log(base64Image);

                    const resultData = {
                        link: `data:image/jpeg;base64,${base64Image}`,
                        type: "img",
                        progressInfoId: idProgress
                    };

                    let responseResult = await fetch('http://localhost:3000/result/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify(resultData)
                    });

                    if (responseResult.ok) {
                        bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶');
                        let info = `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏: ${chatId} –æ—Ç—Ä–ø–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ü–µ–ª—å—é ${goalId} –∏ progressinfoId ${idProgress}`;
                        sendMail(bot, chatId,  info);
                    }

                    // bot.sendPhoto(chatId, jpegPath);
                   
                    // const checkStatusInterval = setInterval(async () => {
                        
                    //     const status = await getStatus(bot, idProgress);
                        
                    // }, 1000 * 60); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                } catch (error) {
                    console.error(error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    downloadPhoto();
                }
            } else {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.');
                downloadPhoto();
            }
        });
    }

    async function downloadVideo() {
        bot.once('message', async (msg) => {
            const urlPattern = /^(https?:\/\/)?((w{3}\.)?)youtube|youtu\.be|vimeo|dailymotion|vk\.com|facebook\.com|twitter\.com|instagram\.com\/.+$/;
            if (msg.text && urlPattern.test(msg.text)) {
                try {
                    if (!fs.existsSync(dirPathImg)) {
                        fs.mkdirSync(dirPathImg, { recursive: true });
                    }

                    const resultData = {
                        link: `${msg.text}`,
                        type: "video",
                        progressInfoId: idProgress
                    };

                    let responseResult = await fetch('http://localhost:3000/result/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify(resultData)
                    });

                    if (responseResult.ok) {
                        bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶');
                        let info = `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏: ${chatId} –æ—Ç—Ä–ø–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ü–µ–ª—å—é ${goalId} –∏ progressinfoId ${idProgress}`;
                        sendMail(bot, chatId,  info);
                    }

                    // bot.sendPhoto(chatId, downloadedImgUrl);

                    // const checkStatusInterval = setInterval(async () => {
                    //     const status = await getStatus(bot, idProgress);
                    //     if (status === 'done') {
                    //         clearInterval(checkStatusInterval);
                    //         bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø–æ—Ö–≤–∞–ª! ü•≥ –ü–æ–∫–∞–∑–∞–ª —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ - –¥–æ—Å—Ç–∏–≥–∞–π —Ü–µ–ª–µ–π –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ!¬ª');
                    //         sendPrize(bot, goalId, chatId);
                    //     } else {
                    //         bot.sendMessage(chatId, '–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!');
                    //     }
                    // }, 1000 * 60); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

                } catch (error) {
                    console.error(error);
                    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    downloadVideo();
                }
            } else {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.');
                downloadVideo();
            }
        });
    }

    askForType(app);
}

module.exports = { downloadRes };
