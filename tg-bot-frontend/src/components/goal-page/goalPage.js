import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import axios from 'axios';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import MyBackEnd from '../../services/botServices';
import { Link } from 'react-router-dom';
import ImageDisplay from '../imageUrl/ImageDisplay';
function GoalPage() {
        const myBackEnddd = new MyBackEnd();

    const location = useLocation();
    const { id, name, user, status, goalId, userId } = location.state;
    const [imageSrc, setImageSrc] = useState('');
    useEffect(() => {
        document.title = name;
        const fetchImage = async () => {
            try {
              const response = await axios.get('http://localhost:3000/files/1.jpg');
              setImageSrc(response.data.url); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ URL —Ñ–∞–π–ª–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
            } catch (error) {
              console.error('Error fetching image:', error);
            }
          };
      
          fetchImage();
        }, []);

    const chatId = userId;
    const token = '6738232005:AAEIQJsUxGAnCieXZeszbdOtpVmMlHQ40QM';
    const [selectedStatus, setSelectedStatus] = useState(status);
    const [selectedAdmin, setSelectedAdmin] = useState('');
    const [comment, setComment] = useState('');
    const [imageUrl, setImageUrl] = useState('');
    useEffect(() => {
        document.title = name;
    }, []);

    const [prize, setPrize] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ
    const [results, setResults] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    useEffect(() => {
        const fetchData = async () => {
            try {
                const Results = await myBackEnddd.getResults(id);
                const Prize = await myBackEnddd.getPrize(id);
                setResults(Results);
                setPrize(Prize);
                const response = await axios.get('http://localhost:3000/save-files/2019712807', { responseType: 'arraybuffer' });
                const arrayBuffer = new Uint8Array(response.data).buffer;
                const blob = new Blob([arrayBuffer], { type: 'image/jpg' }); // –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                const url = URL.createObjectURL(blob);
                setImageUrl(url);
            } catch (error) {
                console.error('Error fetching data:', error.message);
            }
        };
        fetchData();
    }, []);

    const createNewPrize = async () => {
        try {
            const response = await axios.post('http://localhost:3000/prize/', {
                type: 'link', // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–∏–ø –ø—Ä–∏–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω
                content: '–¢–µ–∫—Å—Ç –ø—Ä–∏–∑–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞'
            });
            console.log(response.data);
            alert('–ù–æ–≤—ã–π –ø—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞.');
        }
    };

    const displayImages = () => {
        console.log(imageUrl)
        return  (
            <div>
                <ImageDisplay imageUrl={imageSrc} />
            </div>
        );
    };
    const approveGoal = async () => {
                try {
                    const currentTime = new Date().toISOString();
                    const response = await axios.patch(`http://localhost:3000/progressinfo/${id}`, {
                        status: selectedStatus,
                        comment: comment,
                        admin: selectedAdmin,
                        dateChecked: currentTime
                    });
                    console.log(response.data);
                    alert('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
                    // let url;
                    // if (status=="active" && selectedStatus == "inProgress") {
                    //     console.log('—É—Å–ª–æ–≤–∏–µ 1')
                    //     url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent('–ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª —Ü–µ–ª—å, –∂–¥–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–Ω–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...')}`;
                    // }
                    // if (status=="inProgress" && selectedStatus=="done") {
                    //     console.log('—É—Å–ª–æ–≤–∏–µ 2')
                    //     url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!  –†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–æ–π–Ω—ã–π –ø–æ—Ö–≤–∞–ª! ü•≥ –ü–æ–∫–∞–∑–∞–ª —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –∏ –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫!')}`;
                    // }
                    // if (status=="active" && selectedStatus == "canceled") {
                    //     console.log('—É—Å–ª–æ–≤–∏–µ 3');
                    //     url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent('–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')}`;
                    // }
                    // if (status=="done" && selectedStatus=="done") {
                    //     console.log('—É—Å–ª–æ–≤–∏–µ 4')
                    //     url = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent('–¢–≤–æ—è —Ü–µ–ª—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!')}`;
                    // }
                    // const response2 = await fetch(url);
                    // const data3 = await response2.json();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
                    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
                }
            };
    const generateOptions = (currentStatus) => {
                return [
                    { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–π' },
                    { value: 'inProgress', label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' },
                    { value: 'canceled', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π' },
                    { value: 'done', label: '–ó–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π' }
                ].map(option => 
                    option.value === currentStatus? 
                        <option value={option.value} selected>{option.label}</option> :
                        <option value={option.value}>{option.label}</option>
                );
            };
    return (
        <div>
            <Container>
                <Col>
                    <Row>
                        <h1>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏</h1>
                        <div>ID: {id}</div>
                        <div>goalId: {goalId}</div>
                        <div>–ù–∞–∑–≤–∞–Ω–∏–µ: {name}</div>
                        <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}</div>
                        <select name="status" value={selectedStatus} onChange={(e) => setSelectedStatus(e.target.value)}>
                            {generateOptions(selectedStatus)}
                        </select>
                        <select name="admin" value={selectedAdmin} onChange={(e) => setSelectedAdmin(e.target.value)}>
                            <option value="–¢–∏–ª–µ–∫" selected>–¢–∏–ª–µ–∫</option>
                            <option value="–í–ª–∞–¥">–í–ª–∞–¥</option>
                        </select>
                        <div>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}</div>
                        <div><textarea name="comment" id="commentAdmin" onBlur={(e) => setComment(e.target.value)}></textarea></div>
                        <div><button onClick={approveGoal}>–û–î–û–ë–†–ò–¢–¨</button></div>
                        <div><button>–û–¢–ö–õ–û–ù–ò–¢–¨</button></div>
                        <div><hr /></div>
                    </Row>
                </Col>
            </Container>
            <Container>
                <Row>
                    <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–µ</h2>
                    {prize? (
                        <div>
                            <p>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {prize.userName}</p>
                            <p>–ò–º—è –ø—Ä–∏–∑–∞: {prize.prizeName}</p>
                            <p>–¢–∏–ø –ø—Ä–∏–∑–∞: {prize.prizeType}</p>
                        </div>
                    ) : (
                        <div>
                            <h3>–ü—Ä–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–∑.</h3>
                            <Link to={`/create-prize/${goalId}`}>
                                <button onClick={createNewPrize}>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–∑</button>
                            </Link>
                        </div>
                    )}
                </Row>
                <Row>
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                    {displayImages()}
                </Row>
            </Container>
        </div>
    );
}

export default GoalPage;
